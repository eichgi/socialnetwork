<?php

namespace Tests\Feature;

use App\Status;
use App\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CanLikeStatusesTest extends TestCase
{
    use RefreshDatabase;
    public $status;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->status = factory(Status::class)->create();
    }


    public function test_guest_users_cannot_like_statuses()
    {
        //$status = factory(Status::class)->create();
        $response = $this->post(route('statuses.likes.store', $this->status));
        //dd($response);
        $response->assertRedirect('login');
    }

    public function test_an_authenticated_user_can_like_statuses()
    {
        $this->withoutExceptionHandling();
        $user = factory(User::class)->create();
        //$this->status = factory(Status::class)->create();

        $this->actingAs($user)->postJson(route('statuses.likes.store', $this->status));
        $this->assertDatabaseHas('likes', [
            'user_id' => $user->id,
            'status_id' => $this->status->id,
        ]);
    }

    public function test_an_authenticated_user_can_unlike_statuses()
    {
        $this->withoutExceptionHandling();
        $user = factory(User::class)->create();
        $this->actingAs($user)->postJson(route('statuses.likes.store', $this->status));
        $this->assertDatabaseHas('likes', [
            'user_id' => $user->id,
            'status_id' => $this->status->id,
        ]);
        $this->actingAs($user)->deleteJson(route('statuses.likes.destroy', $this->status));
        $this->assertDatabaseMissing('likes', [
            'user_id' => $user->id,
            'status_id' => $this->status->id,
        ]);
    }
}
